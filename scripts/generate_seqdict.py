import os, sys, numpy as np, Bio
from Bio.Seq import Seq

#The order of AAs in this list determines the one-hot encoding.
aas = ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P',
       'Q', 'R', 'S', 'T', 'V', 'W', 'Y']

#This is the WT sequence.
aa_template = 'EYVVEKVLDRRVVKGKVEYLLKWKGFSDEDNTWEPEENLDCPDLIAEFLQSQKT'
#These are the amino acids we expect not to vary from the WT.
invariant_aas = ''.join([aa_template[i] for i in range(0, 54) if
                                  i not in set([0,2,5,29,36,37,
                                            39,40,42])])

def parse_sequence_files():
    current_dir = os.getcwd()
    #The files generated by the previous step in the pipeline that
    #we will parse.
    file_list = ['RH01_sequences.txt', 'RH02_sequences.txt',
                 'RH03_sequences.txt','RH04_sequences.txt']
    seqdict = dict()
    os.chdir(os.path.join('..', 'raw_data'))
    #We track the number of total sequences and number of sequences with a mutation
    #in an unexpected location for informational purposes
    external_mut, tot_seqs = 0, 0
    for k in range(0, len(file_list)):
        file_handle = open(file_list[k].lower())
        for curr_line in file_handle:
            #Skip the header
            if curr_line.startswith('Seq'):
                pass
            else:
                tot_seqs += 1
                full_seq_aa = curr_line.split('\t',1)[0]
                frequency = int(curr_line.split('\t', 1)[1].strip())
                #If no stop codon...
                if '*' not in full_seq_aa:
                    external_aas = ''.join([full_seq_aa[i] for i in range(0, 54) if
                                  i not in set([0,2,5,29,36,37,
                                            39,40,42])])
                    internal_aas = ''.join([full_seq_aa[i] for i in [0,2,5,29,36,37,
                                            39,40,42]])
                    #Check to make sure there were no mutations outside of the 9 codons of
                    #interest. If not, then keep the "internal_aas" -- i.e. the 9-codon sequence.
                    if external_aas== invariant_aas:
                        if internal_aas not in seqdict:
                            #For each accepted sequence, we will store the frequency with which
                            #it occurs in all four sorts (RH01 - RH04).
                            seqdict[internal_aas] = np.zeros((4))
                            seqdict[internal_aas][k] = frequency
                        elif seqdict[internal_aas][0] == 0:
                            seqdict[internal_aas][k] = frequency
                    else:
                        external_mut += 1
        file_handle.close()
        print('Total number of accepted sequences after processing %s: %s'%(file_list[k],
                                                                       len(seqdict)))
    os.chdir('..')
    print('Total seqs, %s; external mutants, %s'%(tot_seqs, external_mut))
    os.chdir(current_dir)
    return seqdict
